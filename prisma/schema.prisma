// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  FINISHED
}

enum Team {
  WHITE
  GREEN
}

enum Winner {
  WHITE
  GREEN
  DRAW
}

enum PlayerFunction {
  OUTFIELDPLAYER
  GOALKEEPER
}

enum Result {
  WIN
  LOSS
  DRAW
}

enum PlayerProfileRole {
  PERMANENT
  GUEST
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlayerProfile {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  slug              String            @unique
  greenShirtpicture String?
  whiteShirtpicture String?
  currentPicture    String?
  shirtNumber       Int?
  goals             Int
  assists           Int
  goalsConceded     Int?              @default(0)
  victories         Int
  defeats           Int
  draws             Int
  function          PlayerFunction    @default(OUTFIELDPLAYER)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  Stats             PlayerStats[]
  games             Game[]
  MOTM              MOTM[]
  role              PlayerProfileRole @default(PERMANENT)

  @@map("players")
}

model Game {
  id          Int             @id @default(autoincrement())
  whiteGoals  Int             @map("white_goals")
  greenGoals  Int             @map("green_goals")
  MOTM        MOTM[]
  winnerTeam  Winner          @default(DRAW) @map("winner_team")
  status      Status          @default(NOT_STARTED)
  players     PlayerStats[]
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  Player      PlayerProfile[]
  playerId    Int?            @unique
  slug        String?         @unique
  gamePicture String?
  gameDate    DateTime        @default(now())

  @@map("games")
}

model PlayerStats {
  id            Int            @id @default(autoincrement())
  name          String
  goals         Int
  assists       Int
  substituition Int
  goalsConceded Int?
  function      PlayerFunction @default(OUTFIELDPLAYER)
  currentTeam   Team           @map("current_team")
  player        PlayerProfile  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId      Int
  Game          Game?          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId        Int?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  slug          String?        @unique

  @@map("stats")
}

model MOTM {
  id              Int           @id @default(autoincrement())
  player          PlayerProfile @relation(fields: [playerProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  team            Team
  playerProfileId Int
  Game            Game[]
}
